{
  "name": "Gemini Platform Development",
  "description": "Sets up the complete Gemini Platform development environment with PostgreSQL, Redis, API, Webapp, and Bot Worker",
  "setup": {
    "steps": [
      {
        "name": "Check Docker Installation",
        "command": "docker --version && docker-compose --version",
        "continueOnError": true
      },
      {
        "name": "Install Docker (if needed)",
        "command": "if ! command -v docker &> /dev/null; then curl -fsSL https://get.docker.com | sh && sudo usermod -aG docker $USER; fi",
        "continueOnError": true
      },
      {
        "name": "Install Docker Compose (if needed)",
        "command": "if ! command -v docker-compose &> /dev/null; then sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose; fi",
        "continueOnError": true
      },
      {
        "name": "Pass GEMINI_KEY to Docker Compose",
        "command": "export GEMINI_API_KEY=${GEMINI_KEY}"
      },
      {
        "name": "Stop any existing containers",
        "command": "cd docker && docker-compose down",
        "continueOnError": true
      },
      {
        "name": "Build and start all services",
        "command": "cd docker && GEMINI_API_KEY=${GEMINI_KEY} docker-compose up -d --build"
      },
      {
        "name": "Wait for database to be ready",
        "command": "sleep 10"
      },
      {
        "name": "Run database migrations",
        "command": "cd docker && docker exec -it api npm run migration:run",
        "continueOnError": true
      },
      {
        "name": "Seed database (optional)",
        "command": "cd docker && docker exec -it api npm run seed",
        "continueOnError": true
      }
    ]
  },
  "startup": {
    "commands": [
      {
        "name": "Start Docker Compose services",
        "command": "cd docker && GEMINI_API_KEY=${GEMINI_KEY} docker-compose up -d"
      },
      {
        "name": "Show service status",
        "command": "cd docker && docker-compose ps"
      }
    ]
  },
  "shutdown": {
    "commands": [
      {
        "name": "Stop all services",
        "command": "cd docker && docker-compose down"
      }
    ]
  },
  "tasks": {
    "logs": "cd docker && docker-compose logs -f",
    "logs:api": "cd docker && docker-compose logs -f api",
    "logs:webapp": "cd docker && docker-compose logs -f webapp",
    "logs:bot": "cd docker && docker-compose logs -f bot",
    "restart": "cd docker && docker-compose restart",
    "restart:api": "cd docker && docker-compose restart api",
    "restart:webapp": "cd docker && docker-compose restart webapp",
    "restart:bot": "cd docker && docker-compose restart bot",
    "db:migrate": "cd docker && docker exec -it api npm run migration:run",
    "db:seed": "cd docker && docker exec -it api npm run seed",
    "db:console": "cd docker && docker exec -it platform-postgres psql -U platform_user -d platform_db",
    "redis:cli": "cd docker && docker exec -it platform-redis redis-cli",
    "status": "cd docker && docker-compose ps"
  },
  "environment": {
    "GEMINI_API_KEY": "${GEMINI_KEY}",
    "NODE_ENV": "development",
    "API_URL": "http://localhost:4000",
    "WEBAPP_URL": "http://localhost:3000"
  },
  "ports": {
    "postgres": 5433,
    "redis": 6379,
    "api": 4000,
    "webapp": 3000
  },
  "healthChecks": [
    {
      "name": "PostgreSQL",
      "url": "localhost:5433",
      "type": "tcp"
    },
    {
      "name": "Redis",
      "url": "localhost:6379",
      "type": "tcp"
    },
    {
      "name": "API",
      "url": "http://localhost:4000/health",
      "type": "http"
    },
    {
      "name": "Webapp",
      "url": "http://localhost:3000",
      "type": "http"
    }
  ]
}

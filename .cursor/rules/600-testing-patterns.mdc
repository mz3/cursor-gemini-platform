# Testing Patterns

## Testing Strategy

### Testing Pyramid
- **Unit Tests**: 70% - Test individual functions and components
- **Integration Tests**: 20% - Test API endpoints and service interactions
- **E2E Tests**: 10% - Test complete user workflows

## Backend Testing Patterns

### Unit Test Structure
```typescript
import { EntityService } from '../services/EntityService.js';
import { Entity } from '../entities/Entity.js';
import { Repository } from 'typeorm';

describe('EntityService', () => {
  let service: EntityService;
  let mockRepository: jest.Mocked<Repository<Entity>>;

  beforeEach(() => {
    // Create mock repository
    mockRepository = {
      find: jest.fn(),
      findOne: jest.fn(),
      create: jest.fn(),
      save: jest.fn(),
      update: jest.fn(),
      remove: jest.fn(),
    } as any;

    service = new EntityService(mockRepository);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('findAll', () => {
    it('should return all entities for user', async () => {
      // Arrange
      const userId = 'user-123';
      const mockEntities = [
        { id: '1', name: 'Entity 1', userId },
        { id: '2', name: 'Entity 2', userId }
      ];
      mockRepository.find.mockResolvedValue(mockEntities);

      // Act
      const result = await service.findAll(userId);

      // Assert
      expect(result).toEqual(mockEntities);
      expect(mockRepository.find).toHaveBeenCalledWith({
        where: { userId },
        relations: ['relatedEntity']
      });
    });

    it('should return empty array when no entities found', async () => {
      // Arrange
      const userId = 'user-123';
      mockRepository.find.mockResolvedValue([]);

      // Act
      const result = await service.findAll(userId);

      // Assert
      expect(result).toEqual([]);
    });
  });

  describe('findById', () => {
    it('should return entity when found', async () => {
      // Arrange
      const entityId = 'entity-123';
      const userId = 'user-123';
      const mockEntity = { id: entityId, name: 'Test Entity', userId };
      mockRepository.findOne.mockResolvedValue(mockEntity);

      // Act
      const result = await service.findById(entityId, userId);

      // Assert
      expect(result).toEqual(mockEntity);
      expect(mockRepository.findOne).toHaveBeenCalledWith({
        where: { id: entityId, userId },
        relations: ['relatedEntity']
      });
    });

    it('should return null when entity not found', async () => {
      // Arrange
      const entityId = 'entity-123';
      const userId = 'user-123';
      mockRepository.findOne.mockResolvedValue(null);

      // Act
      const result = await service.findById(entityId, userId);

      // Assert
      expect(result).toBeNull();
    });
  });

  describe('create', () => {
    it('should create new entity', async () => {
      // Arrange
      const createDto = { name: 'New Entity', description: 'Test description' };
      const userId = 'user-123';
      const mockEntity = { id: 'new-id', ...createDto, userId };

      mockRepository.create.mockReturnValue(mockEntity);
      mockRepository.save.mockResolvedValue(mockEntity);

      // Act
      const result = await service.create(createDto, userId);

      // Assert
      expect(result).toEqual(mockEntity);
      expect(mockRepository.create).toHaveBeenCalledWith({
        ...createDto,
        userId
      });
      expect(mockRepository.save).toHaveBeenCalledWith(mockEntity);
    });
  });

  describe('update', () => {
    it('should update existing entity', async () => {
      // Arrange
      const entityId = 'entity-123';
      const userId = 'user-123';
      const updateDto = { name: 'Updated Entity' };
      const existingEntity = { id: entityId, name: 'Old Name', userId };
      const updatedEntity = { ...existingEntity, ...updateDto };

      mockRepository.findOne.mockResolvedValue(existingEntity);
      mockRepository.save.mockResolvedValue(updatedEntity);

      // Act
      const result = await service.update(entityId, updateDto, userId);

      // Assert
      expect(result).toEqual(updatedEntity);
      expect(mockRepository.save).toHaveBeenCalledWith(updatedEntity);
    });

    it('should throw error when entity not found', async () => {
      // Arrange
      const entityId = 'entity-123';
      const userId = 'user-123';
      const updateDto = { name: 'Updated Entity' };

      mockRepository.findOne.mockResolvedValue(null);

      // Act & Assert
      await expect(service.update(entityId, updateDto, userId))
        .rejects.toThrow('Entity not found');
    });
  });
});
```

### Integration Test Structure
```typescript
import request from 'supertest';
import { app } from '../index.js';
import { getConnection } from 'typeorm';
import { User } from '../entities/User.js';

describe('Entity Routes', () => {
  let authToken: string;
  let testUser: User;

  beforeAll(async () => {
    // Setup test database
    await setupTestDatabase();

    // Create test user and get auth token
    testUser = await createTestUser();
    authToken = await getAuthToken(testUser);
  });

  afterAll(async () => {
    await getConnection().close();
  });

  beforeEach(async () => {
    // Clean up test data
    await cleanupTestData();
  });

  describe('GET /api/entities', () => {
    it('should return 401 without authentication', async () => {
      const response = await request(app)
        .get('/api/entities')
        .expect(401);

      expect(response.body).toHaveProperty('message');
    });

    it('should return entities with valid token', async () => {
      const response = await request(app)
        .get('/api/entities')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(Array.isArray(response.body)).toBe(true);
    });

    it('should return only user entities', async () => {
      // Create entities for different users
      await createEntityForUser(testUser.id, 'User Entity');
      await createEntityForUser('other-user', 'Other User Entity');

      const response = await request(app)
        .get('/api/entities')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveLength(1);
      expect(response.body[0].name).toBe('User Entity');
    });
  });

  describe('POST /api/entities', () => {
    it('should create entity with valid data', async () => {
      const entityData = {
        name: 'Test Entity',
        description: 'Test description'
      };

      const response = await request(app)
        .post('/api/entities')
        .set('Authorization', `Bearer ${authToken}`)
        .send(entityData)
        .expect(201);

      expect(response.body).toHaveProperty('id');
      expect(response.body.name).toBe(entityData.name);
      expect(response.body.description).toBe(entityData.description);
      expect(response.body.userId).toBe(testUser.id);
    });

    it('should return 400 with invalid data', async () => {
      const invalidData = {
        name: '', // Empty name should fail validation
        description: 'Test description'
      };

      const response = await request(app)
        .post('/api/entities')
        .set('Authorization', `Bearer ${authToken}`)
        .send(invalidData)
        .expect(400);

      expect(response.body).toHaveProperty('errors');
    });
  });

  describe('PUT /api/entities/:id', () => {
    it('should update entity with valid data', async () => {
      // Create test entity
      const entity = await createEntityForUser(testUser.id, 'Original Name');

      const updateData = {
        name: 'Updated Name',
        description: 'Updated description'
      };

      const response = await request(app)
        .put(`/api/entities/${entity.id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .send(updateData)
        .expect(200);

      expect(response.body.name).toBe(updateData.name);
      expect(response.body.description).toBe(updateData.description);
    });

    it('should return 404 for non-existent entity', async () => {
      const updateData = { name: 'Updated Name' };

      await request(app)
        .put('/api/entities/non-existent-id')
        .set('Authorization', `Bearer ${authToken}`)
        .send(updateData)
        .expect(404);
    });
  });

  describe('DELETE /api/entities/:id', () => {
    it('should delete entity', async () => {
      // Create test entity
      const entity = await createEntityForUser(testUser.id, 'To Delete');

      await request(app)
        .delete(`/api/entities/${entity.id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(204);

      // Verify entity is deleted
      const response = await request(app)
        .get(`/api/entities/${entity.id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(404);
    });
  });
});

// Helper functions
async function setupTestDatabase() {
  // Setup test database connection
}

async function createTestUser(): Promise<User> {
  // Create and return test user
}

async function getAuthToken(user: User): Promise<string> {
  // Get JWT token for user
}

async function createEntityForUser(userId: string, name: string) {
  // Create test entity
}

async function cleanupTestData() {
  // Clean up test data
}
```

## Frontend Testing Patterns

### Component Testing
```typescript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter } from 'react-router-dom';
import EntityComponent from './EntityComponent';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: { retry: false },
    mutations: { retry: false },
  },
});

const renderWithProviders = (component: React.ReactElement) => {
  return render(
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        {component}
      </BrowserRouter>
    </QueryClientProvider>
  );
};

describe('EntityComponent', () => {
  beforeEach(() => {
    queryClient.clear();
  });

  describe('Create Mode', () => {
    it('renders create form when no id provided', () => {
      renderWithProviders(<EntityComponent />);

      expect(screen.getByText('Create Entity')).toBeInTheDocument();
      expect(screen.getByLabelText('Name')).toBeInTheDocument();
      expect(screen.getByLabelText('Description')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'Save' })).toBeInTheDocument();
    });

    it('submits form data correctly', async () => {
      const mockOnSubmit = jest.fn();
      renderWithProviders(<EntityComponent onSubmit={mockOnSubmit} />);

      // Fill form
      fireEvent.change(screen.getByLabelText('Name'), {
        target: { value: 'Test Entity' },
      });

      fireEvent.change(screen.getByLabelText('Description'), {
        target: { value: 'Test description' },
      });

      // Submit form
      fireEvent.click(screen.getByRole('button', { name: 'Save' }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith({
          name: 'Test Entity',
          description: 'Test description',
          isActive: true,
        });
      });
    });

    it('shows validation errors for invalid data', async () => {
      renderWithProviders(<EntityComponent />);

      // Try to submit empty form
      fireEvent.click(screen.getByRole('button', { name: 'Save' }));

      await waitFor(() => {
        expect(screen.getByText('Name is required')).toBeInTheDocument();
      });
    });
  });

  describe('Edit Mode', () => {
    it('renders edit form when id provided', async () => {
      const mockEntity = {
        id: '123',
        name: 'Test Entity',
        description: 'Test description',
        isActive: true,
      };

      // Mock API call
      jest.spyOn(global, 'fetch').mockResolvedValueOnce({
        ok: true,
        json: async () => mockEntity,
      } as Response);

      renderWithProviders(<EntityComponent id="123" />);

      await waitFor(() => {
        expect(screen.getByText('Edit Entity')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Test Entity')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Test description')).toBeInTheDocument();
      });
    });

    it('loads entity data correctly', async () => {
      const mockEntity = {
        id: '123',
        name: 'Loaded Entity',
        description: 'Loaded description',
        isActive: false,
      };

      jest.spyOn(global, 'fetch').mockResolvedValueOnce({
        ok: true,
        json: async () => mockEntity,
      } as Response);

      renderWithProviders(<EntityComponent id="123" />);

      await waitFor(() => {
        expect(screen.getByDisplayValue('Loaded Entity')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Loaded description')).toBeInTheDocument();
        expect(screen.getByRole('checkbox')).not.toBeChecked();
      });
    });
  });

  describe('Error Handling', () => {
    it('shows error message when API call fails', async () => {
      jest.spyOn(global, 'fetch').mockRejectedValueOnce(
        new Error('Network error')
      );

      renderWithProviders(<EntityComponent id="123" />);

      await waitFor(() => {
        expect(screen.getByText('Network error')).toBeInTheDocument();
      });
    });

    it('shows loading state while fetching data', () => {
      jest.spyOn(global, 'fetch').mockImplementationOnce(
        () => new Promise(() => {}) // Never resolves
      );

      renderWithProviders(<EntityComponent id="123" />);

      expect(screen.getByRole('progressbar')).toBeInTheDocument();
    });
  });
});
```

### API Service Testing
```typescript
import { entityApi } from '../api/entityApi';

// Mock axios
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

describe('Entity API', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    localStorage.clear();
  });

  describe('getAll', () => {
    it('should fetch all entities', async () => {
      const mockEntities = [
        { id: '1', name: 'Entity 1' },
        { id: '2', name: 'Entity 2' }
      ];

      mockedAxios.get.mockResolvedValueOnce({
        data: mockEntities
      });

      const result = await entityApi.getAll();

      expect(result).toEqual(mockEntities);
      expect(mockedAxios.get).toHaveBeenCalledWith('/api/entities');
    });

    it('should include auth token in request', async () => {
      localStorage.setItem('token', 'test-token');

      mockedAxios.get.mockResolvedValueOnce({
        data: []
      });

      await entityApi.getAll();

      expect(mockedAxios.get).toHaveBeenCalledWith('/api/entities', {
        headers: {
          Authorization: 'Bearer test-token'
        }
      });
    });
  });

  describe('create', () => {
    it('should create entity', async () => {
      const createData = { name: 'New Entity', description: 'Test' };
      const createdEntity = { id: '123', ...createData };

      mockedAxios.post.mockResolvedValueOnce({
        data: createdEntity
      });

      const result = await entityApi.create(createData);

      expect(result).toEqual(createdEntity);
      expect(mockedAxios.post).toHaveBeenCalledWith('/api/entities', createData);
    });
  });
});
```

## E2E Testing with Cypress

### Cypress Test Structure
```typescript
describe('Entity Management', () => {
  beforeEach(() => {
    // Login before each test
    cy.login('admin@platform.com', 'admin123');
  });

  describe('Entity List', () => {
    it('should display entities list', () => {
      cy.visit('/entities');

      cy.get('[data-testid="entity-list"]').should('be.visible');
      cy.get('[data-testid="entity-item"]').should('have.length.at.least', 1);
    });

    it('should filter entities by search', () => {
      cy.visit('/entities');

      cy.get('[data-testid="search-input"]').type('Test Entity');
      cy.get('[data-testid="entity-item"]').should('have.length', 1);
      cy.get('[data-testid="entity-item"]').should('contain', 'Test Entity');
    });

    it('should filter entities by status', () => {
      cy.visit('/entities');

      cy.get('[data-testid="status-filter"]').select('Active');
      cy.get('[data-testid="entity-item"]').each(($item) => {
        cy.wrap($item).should('contain', 'Active');
      });
    });
  });

  describe('Entity Creation', () => {
    it('should create new entity', () => {
      cy.visit('/entities/create');

      // Fill form
      cy.get('[data-testid="name-input"]').type('New Test Entity');
      cy.get('[data-testid="description-input"]').type('Test description');
      cy.get('[data-testid="active-checkbox"]').check();

      // Submit form
      cy.get('[data-testid="save-button"]').click();

      // Verify success
      cy.url().should('include', '/entities');
      cy.get('[data-testid="success-message"]').should('contain', 'Entity created successfully');
      cy.get('[data-testid="entity-item"]').should('contain', 'New Test Entity');
    });

    it('should show validation errors for invalid data', () => {
      cy.visit('/entities/create');

      // Try to submit empty form
      cy.get('[data-testid="save-button"]').click();

      cy.get('[data-testid="name-error"]').should('contain', 'Name is required');
    });
  });

  describe('Entity Editing', () => {
    it('should edit existing entity', () => {
      cy.visit('/entities');
      cy.get('[data-testid="entity-item"]').first().click();
      cy.get('[data-testid="edit-button"]').click();

      // Update form
      cy.get('[data-testid="name-input"]').clear().type('Updated Entity Name');
      cy.get('[data-testid="description-input"]').clear().type('Updated description');

      // Submit form
      cy.get('[data-testid="save-button"]').click();

      // Verify success
      cy.get('[data-testid="success-message"]').should('contain', 'Entity updated successfully');
      cy.get('[data-testid="entity-name"]').should('contain', 'Updated Entity Name');
    });
  });

  describe('Entity Deletion', () => {
    it('should delete entity', () => {
      cy.visit('/entities');
      cy.get('[data-testid="entity-item"]').first().click();

      // Confirm deletion
      cy.get('[data-testid="delete-button"]').click();
      cy.get('[data-testid="confirm-dialog"]').should('be.visible');
      cy.get('[data-testid="confirm-delete"]').click();

      // Verify deletion
      cy.get('[data-testid="success-message"]').should('contain', 'Entity deleted successfully');
      cy.url().should('include', '/entities');
    });
  });
});
```

### Cypress Configuration
```typescript
// cypress.config.ts
import { defineConfig } from 'cypress';

export default defineConfig({
  e2e: {
    baseUrl: 'http://localhost:3000',
    supportFile: 'cypress/support/e2e.ts',
    specPattern: 'cypress/e2e/**/*.cy.ts',
    viewportWidth: 1280,
    viewportHeight: 720,
    video: false,
    screenshotOnRunFailure: true,
    defaultCommandTimeout: 10000,
    requestTimeout: 10000,
    responseTimeout: 10000,
    env: {
      apiUrl: 'http://localhost:4000',
      testEmail: 'admin@platform.com',
      testPassword: 'admin123',
    },
  },
  component: {
    devServer: {
      framework: 'react',
      bundler: 'vite',
    },
  },
});
```

### Custom Cypress Commands
```typescript
// cypress/support/commands.ts
declare global {
  namespace Cypress {
    interface Chainable {
      login(email: string, password: string): Chainable<void>;
      createEntity(name: string, description?: string): Chainable<string>;
      deleteEntity(id: string): Chainable<void>;
    }
  }
}

Cypress.Commands.add('login', (email: string, password: string) => {
  cy.visit('/login');
  cy.get('[data-testid="email-input"]').type(email);
  cy.get('[data-testid="password-input"]').type(password);
  cy.get('[data-testid="login-button"]').click();
  cy.url().should('not.include', '/login');
});

Cypress.Commands.add('createEntity', (name: string, description?: string) => {
  cy.request({
    method: 'POST',
    url: `${Cypress.env('apiUrl')}/api/entities`,
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
    body: {
      name,
      description: description || '',
      isActive: true,
    },
  }).then((response) => {
    return response.body.id;
  });
});

Cypress.Commands.add('deleteEntity', (id: string) => {
  cy.request({
    method: 'DELETE',
    url: `${Cypress.env('apiUrl')}/api/entities/${id}`,
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  });
});
```

## Test Utilities

### Test Data Factories
```typescript
// test/factories/EntityFactory.ts
export class EntityFactory {
  static create(overrides: Partial<Entity> = {}): Entity {
    return {
      id: `entity-${Date.now()}`,
      name: 'Test Entity',
      description: 'Test description',
      isActive: true,
      userId: 'user-123',
      createdAt: new Date(),
      updatedAt: new Date(),
      ...overrides,
    };
  }

  static createMany(count: number, overrides: Partial<Entity> = {}): Entity[] {
    return Array.from({ length: count }, (_, index) =>
      this.create({
        name: `Test Entity ${index + 1}`,
        ...overrides,
      })
    );
  }
}

// test/factories/UserFactory.ts
export class UserFactory {
  static create(overrides: Partial<User> = {}): User {
    return {
      id: `user-${Date.now()}`,
      email: 'test@example.com',
      firstName: 'Test',
      lastName: 'User',
      role: 'user',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
      ...overrides,
    };
  }
}
```

### Test Helpers
```typescript
// test/helpers/testUtils.ts
export const waitForLoadingToFinish = () => {
  cy.get('[data-testid="loading-spinner"]').should('not.exist');
};

export const assertSuccessMessage = (message: string) => {
  cy.get('[data-testid="success-message"]').should('contain', message);
};

export const assertErrorMessage = (message: string) => {
  cy.get('[data-testid="error-message"]').should('contain', message);
};

export const fillEntityForm = (data: {
  name: string;
  description?: string;
  isActive?: boolean;
}) => {
  cy.get('[data-testid="name-input"]').clear().type(data.name);

  if (data.description !== undefined) {
    cy.get('[data-testid="description-input"]').clear().type(data.description);
  }

  if (data.isActive !== undefined) {
    if (data.isActive) {
      cy.get('[data-testid="active-checkbox"]').check();
    } else {
      cy.get('[data-testid="active-checkbox"]').uncheck();
    }
  }
};
```

## Performance Testing

### Load Testing with Artillery
```yaml
# artillery.yml
config:
  target: 'http://localhost:4000'
  phases:
    - duration: 60
      arrivalRate: 10
  defaults:
    headers:
      Authorization: 'Bearer {{ $randomString() }}'

scenarios:
  - name: "Entity CRUD operations"
    weight: 100
    flow:
      - get:
          url: "/api/entities"
      - post:
          url: "/api/entities"
          json:
            name: "Test Entity {{ $randomString() }}"
            description: "Test description"
      - think: 1
      - get:
          url: "/api/entities/{{ entityId }}"
      - put:
          url: "/api/entities/{{ entityId }}"
          json:
            name: "Updated Entity {{ $randomString() }}"
      - delete:
          url: "/api/entities/{{ entityId }}"
```

### Memory Leak Testing
```typescript
// test/memory-leak.test.ts
describe('Memory Leak Tests', () => {
  it('should not leak memory during entity operations', async () => {
    const initialMemory = process.memoryUsage().heapUsed;

    // Perform many entity operations
    for (let i = 0; i < 1000; i++) {
      await createTestEntity();
      await deleteTestEntity();
    }

    const finalMemory = process.memoryUsage().heapUsed;
    const memoryIncrease = finalMemory - initialMemory;

    // Memory increase should be reasonable (less than 50MB)
    expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);
  });
});
```
description:
globs:
alwaysApply: false
---

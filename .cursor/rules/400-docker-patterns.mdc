# Docker Development Patterns

## Container Architecture

### Multi-Service Architecture
The platform uses a microservices architecture with separate containers for:
- **API Service**: Backend API (port 4000)
- **Webapp Service**: React frontend (port 3000)
- **Bot Service**: Background worker
- **PostgreSQL**: Database (port 5433)
- **Redis**: Cache and queue (port 6379)

## Docker Compose Patterns

### Development Environment
```yaml
services:
  postgres:
    image: postgres:14-alpine
    container_name: platform-postgres
    environment:
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: platform_password
      POSTGRES_DB: platform_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - platform-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform_user -d platform_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: platform-redis
    ports:
      - "6379:6379"
    networks:
      - platform-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: api
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: platform_user
      DB_PASSWORD: platform_password
      DB_NAME: platform_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_PORT: 4000
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - platform-net
    volumes:
      - ../api:/app
      - /app/node_modules

  webapp:
    build:
      context: ../webapp
      dockerfile: Dockerfile
    container_name: webapp
    environment:
      - VITE_DOCKER=true
      - REACT_APP_API_URL=http://api:4000
      - REACT_APP_WS_URL=ws://api:4000
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - platform-net
    volumes:
      - ../webapp:/app
      - /app/node_modules

  bot:
    build:
      context: ../bot
      dockerfile: Dockerfile
    container_name: bot
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: platform_user
      DB_PASSWORD: platform_password
      DB_NAME: platform_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - platform-net
    volumes:
      - ../bot:/app
      - /app/node_modules

networks:
  platform-net:
    driver: bridge

volumes:
  postgres-data:
```

## Dockerfile Patterns

### API Service Dockerfile
```dockerfile
# Use Node.js 18 Alpine for smaller image size
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership of the app directory
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Start the application
CMD ["npm", "start"]
```

### Webapp Service Dockerfile
```dockerfile
# Multi-stage build for production
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create non-root user
RUN addgroup -g 1001 -S nginx
RUN adduser -S nginx -u 1001

# Change ownership
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx
RUN chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
```

### Bot Service Dockerfile
```dockerfile
FROM node:18-alpine

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    docker \
    docker-compose

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Add user to docker group
RUN addgroup nodejs docker

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Start the application
CMD ["npm", "start"]
```

## Nginx Configuration

### Production Nginx Config
```nginx
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=web:10m rate=30r/s;

    # Upstream API server
    upstream api_backend {
        server api:4000;
    }

    # Main server block
    server {
        listen 3000;
        server_name localhost;

        # Security
        server_tokens off;

        # Root directory
        root /usr/share/nginx/html;
        index index.html;

        # Handle React Router
        location / {
            try_files $uri $uri/ /index.html;
        }

        # API proxy
        location /api/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Static files caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
```

## Development Patterns

### Hot Reload Configuration
```yaml
# Development volumes for hot reload
volumes:
  - ../api:/app
  - /app/node_modules  # Preserve node_modules in container

# Development environment variables
environment:
  NODE_ENV: development
  DEBUG: "*"
```

### Database Migration Commands
```bash
# Run migrations in container
docker exec api npm run migration:run

# Generate new migration
docker exec api npm run migration:generate -- src/migrations/[MigrationName]

# Revert migration
docker exec api npm run migration:revert

# Show migration status
docker exec api npm run migration:show
```

### Logging and Debugging
```bash
# View logs for specific service
docker-compose logs -f api

# View logs for all services
docker-compose logs -f

# Execute commands in container
docker exec -it api sh

# Check container health
docker-compose ps
```

## Production Patterns

### Multi-Stage Builds
```dockerfile
# Build stage
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Production stage
FROM node:18-alpine AS production
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY --from=builder /app/dist ./dist
USER node
EXPOSE 4000
CMD ["npm", "start"]
```

### Environment-Specific Configurations
```yaml
# docker-compose.prod.yml
services:
  api:
    build:
      context: ../api
      target: production
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
```

### Health Checks
```yaml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
```

## Security Patterns

### Non-Root User
```dockerfile
# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs
```

### Security Headers
```nginx
# Security headers in nginx
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header X-Content-Type-Options "nosniff" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
```

### Secrets Management
```yaml
# Use environment variables for secrets
environment:
  JWT_SECRET: ${JWT_SECRET}
  DB_PASSWORD: ${DB_PASSWORD}
  GEMINI_API_KEY: ${GEMINI_API_KEY}

# Or use Docker secrets in production
secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  db_password:
    file: ./secrets/db_password.txt
```

## Performance Patterns

### Resource Limits
```yaml
deploy:
  resources:
    limits:
      memory: 512M
      cpus: '0.5'
    reservations:
      memory: 256M
      cpus: '0.25'
```

### Caching Strategies
```nginx
# Static file caching
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
}

# API response caching
location /api/ {
    proxy_cache_valid 200 1h;
    proxy_cache_valid 404 1m;
}
```

### Load Balancing
```nginx
upstream api_backend {
    server api1:4000;
    server api2:4000;
    server api3:4000;
}
```

## Monitoring Patterns

### Logging Configuration
```yaml
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
```

### Health Check Endpoints
```typescript
// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    version: process.env.npm_package_version
  });
});
```

### Metrics Collection
```typescript
// Basic metrics endpoint
app.get('/metrics', (req, res) => {
  res.json({
    requests: {
      total: requestCount,
      successful: successCount,
      failed: errorCount
    },
    performance: {
      averageResponseTime: avgResponseTime,
      memoryUsage: process.memoryUsage(),
      cpuUsage: process.cpuUsage()
    }
  });
});
```
description:
globs:
alwaysApply: false
---

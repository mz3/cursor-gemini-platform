---
description: docker, docker-compose, build, container
alwaysApply: false
---
# Docker Development Patterns

## Container Architecture

### Multi-Service Architecture
The platform uses a microservices architecture with separate containers for:
- **API Service**: Backend API (port 4000)
- **Webapp Service**: React frontend (port 3000)
- **Bot Service**: Background worker
- **PostgreSQL**: Database (port 5433)
- **Redis**: Cache and queue (port 6379)

## Docker Compose Patterns

### Development Environment

### Database Migration Commands
```bash
# Run migrations in container
docker exec api npm run migration:run

# Generate new migration
docker exec api npm run migration:generate -- src/migrations/[MigrationName]

# Revert migration
docker exec api npm run migration:revert

# Show migration status
docker exec api npm run migration:show
```

### Logging and Debugging
```bash
# View recent logs for specific service
docker compose logs api

# View recent logs for all services
docker compose logs

# Execute commands in container
docker exec -it api sh

# Check container health
docker compose ps
```

## Production Patterns

### Multi-Stage Builds
```dockerfile
# Build stage
FROM node:24-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Production stage
FROM node:24-alpine AS production
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY --from=builder /app/dist ./dist
USER node
EXPOSE 4000
CMD ["npm", "start"]
```

## Monitoring Patterns

### Logging Configuration
```yaml
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
```

### Health Check Endpoints
```typescript
// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    version: process.env.npm_package_version
  });
});
```

### Metrics Collection
```typescript
// Basic metrics endpoint
app.get('/metrics', (req, res) => {
  res.json({
    requests: {
      total: requestCount,
      successful: successCount,
      failed: errorCount
    },
    performance: {
      averageResponseTime: avgResponseTime,
      memoryUsage: process.memoryUsage(),
      cpuUsage: process.cpuUsage()
    }
  });
});
```

# Bot Service Development Patterns

## Service Architecture

### Bot Service Overview
The bot service is a background worker that processes jobs from Redis queues and handles application generation, deployment, and file system operations.

## Core Patterns

### Service Structure
```typescript
import { DataSource } from 'typeorm';
import Redis from 'redis';
import { BotService } from './services/BotService.js';
import { BuildService } from './services/BuildService.js';
import { WorkerService } from './services/WorkerService.js';

export class BotApplication {
  private dataSource: DataSource;
  private redisClient: Redis.RedisClientType;
  private botService: BotService;
  private buildService: BuildService;
  private workerService: WorkerService;

  constructor() {
    this.initializeServices();
  }

  private async initializeServices() {
    // Initialize database connection
    this.dataSource = new DataSource({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USER || 'platform_user',
      password: process.env.DB_PASSWORD || 'platform_password',
      database: process.env.DB_NAME || 'platform_db',
      entities: [/* entity imports */],
      synchronize: false,
    });

    // Initialize Redis connection
    this.redisClient = Redis.createClient({
      url: `redis://${process.env.REDIS_HOST || 'localhost'}:${process.env.REDIS_PORT || '6379'}`
    });

    // Initialize services
    this.botService = new BotService(this.dataSource);
    this.buildService = new BuildService(this.dataSource);
    this.workerService = new WorkerService(this.redisClient, this.dataSource);
  }

  async start() {
    try {
      await this.dataSource.initialize();
      await this.redisClient.connect();

      console.log('‚úÖ Bot service initialized successfully');

      // Start processing jobs
      await this.workerService.startProcessing();

    } catch (error) {
      console.error('‚ùå Failed to start bot service:', error);
      process.exit(1);
    }
  }

  async stop() {
    await this.redisClient.quit();
    await this.dataSource.destroy();
  }
}
```

### Worker Service Pattern
```typescript
import Redis from 'redis';
import { DataSource } from 'typeorm';
import { Job } from '../types/Job.js';

export class WorkerService {
  constructor(
    private redisClient: Redis.RedisClientType,
    private dataSource: DataSource
  ) {}

  async startProcessing() {
    console.log('üîÑ Starting job processing...');

    // Start processing different job types
    this.processJobQueue('application-build');
    this.processJobQueue('application-deploy');
    this.processJobQueue('bot-execution');
  }

  private async processJobQueue(queueName: string) {
    setInterval(async () => {
      try {
        const job = await this.redisClient.lPop(queueName);
        if (job) {
          await this.processJob(queueName, JSON.parse(job));
        }
      } catch (error) {
        console.error(`Error processing ${queueName} job:`, error);
      }
    }, 1000); // Poll every second
  }

  private async processJob(queueName: string, jobData: Job) {
    console.log(`üì¶ Processing ${queueName} job:`, jobData.id);

    try {
      switch (queueName) {
        case 'application-build':
          await this.handleApplicationBuild(jobData);
          break;
        case 'application-deploy':
          await this.handleApplicationDeploy(jobData);
          break;
        case 'bot-execution':
          await this.handleBotExecution(jobData);
          break;
        default:
          console.warn(`Unknown queue: ${queueName}`);
      }
    } catch (error) {
      console.error(`‚ùå Job ${jobData.id} failed:`, error);
      await this.handleJobFailure(jobData, error);
    }
  }

  private async handleApplicationBuild(jobData: Job) {
    // Implementation for application build
    console.log(`üèóÔ∏è Building application: ${jobData.applicationId}`);

    // Update job status
    await this.updateJobStatus(jobData.id, 'processing');

    // Build logic here...

    await this.updateJobStatus(jobData.id, 'completed');
  }

  private async handleApplicationDeploy(jobData: Job) {
    // Implementation for application deployment
    console.log(`üöÄ Deploying application: ${jobData.applicationId}`);

    await this.updateJobStatus(jobData.id, 'processing');

    // Deployment logic here...

    await this.updateJobStatus(jobData.id, 'completed');
  }

  private async handleBotExecution(jobData: Job) {
    // Implementation for bot execution
    console.log(`ü§ñ Executing bot: ${jobData.botId}`);

    await this.updateJobStatus(jobData.id, 'processing');

    // Bot execution logic here...

    await this.updateJobStatus(jobData.id, 'completed');
  }

  private async handleJobFailure(jobData: Job, error: Error) {
    console.error(`üí• Job ${jobData.id} failed:`, error);
    await this.updateJobStatus(jobData.id, 'failed', error.message);
  }

  private async updateJobStatus(jobId: string, status: string, error?: string) {
    // Update job status in database
    const jobRepository = this.dataSource.getRepository('Job');
    await jobRepository.update(jobId, {
      status,
      error: error || null,
      updatedAt: new Date()
    });
  }
}
```

### Build Service Pattern
```typescript
import { DataSource } from 'typeorm';
import fs from 'fs-extra';
import path from 'path';
import ejs from 'ejs';

export class BuildService {
  constructor(private dataSource: DataSource) {}

  async buildApplication(applicationId: string): Promise<string> {
    console.log(`üèóÔ∏è Building application: ${applicationId}`);

    // Get application data
    const application = await this.getApplication(applicationId);
    if (!application) {
      throw new Error(`Application ${applicationId} not found`);
    }

    // Create build directory
    const buildDir = path.join(process.cwd(), 'generated-apps', applicationId);
    await fs.ensureDir(buildDir);

    // Generate application files
    await this.generateApplicationFiles(application, buildDir);

    // Build Docker image
    const imageName = await this.buildDockerImage(applicationId, buildDir);

    console.log(`‚úÖ Application built successfully: ${imageName}`);
    return imageName;
  }

  private async generateApplicationFiles(application: any, buildDir: string) {
    // Generate package.json
    const packageJson = await this.generatePackageJson(application);
    await fs.writeJson(path.join(buildDir, 'package.json'), packageJson, { spaces: 2 });

    // Generate main application file
    const mainFile = await this.generateMainFile(application);
    await fs.writeFile(path.join(buildDir, 'src', 'index.js'), mainFile);

    // Generate Dockerfile
    const dockerfile = await this.generateDockerfile(application);
    await fs.writeFile(path.join(buildDir, 'Dockerfile'), dockerfile);

    // Generate other necessary files...
  }

  private async generatePackageJson(application: any) {
    const template = await fs.readFile(
      path.join(process.cwd(), 'templates', 'package.json.ejs'),
      'utf-8'
    );

    return ejs.render(template, {
      name: application.name,
      version: '1.0.0',
      description: application.description,
      dependencies: application.dependencies || {}
    });
  }

  private async generateMainFile(application: any) {
    const template = await fs.readFile(
      path.join(process.cwd(), 'templates', 'index.js.ejs'),
      'utf-8'
    );

    return ejs.render(template, {
      application,
      routes: application.routes || [],
      models: application.models || []
    });
  }

  private async generateDockerfile(application: any) {
    const template = await fs.readFile(
      path.join(process.cwd(), 'templates', 'Dockerfile.ejs'),
      'utf-8'
    );

    return ejs.render(template, {
      nodeVersion: '18-alpine',
      port: application.port || 3000
    });
  }

  private async buildDockerImage(applicationId: string, buildDir: string): Promise<string> {
    const imageName = `platform-app-${applicationId}`;

    // Build Docker image
    const { exec } = await import('child_process');
    const util = await import('util');
    const execAsync = util.promisify(exec);

    try {
      await execAsync(`docker build -t ${imageName} .`, { cwd: buildDir });
      console.log(`üê≥ Docker image built: ${imageName}`);
      return imageName;
    } catch (error) {
      console.error('‚ùå Docker build failed:', error);
      throw new Error(`Failed to build Docker image: ${error}`);
    }
  }

  private async getApplication(applicationId: string) {
    const applicationRepository = this.dataSource.getRepository('Application');
    return applicationRepository.findOne({
      where: { id: applicationId },
      relations: ['models', 'routes', 'components']
    });
  }
}
```

### Bot Service Pattern
```typescript
import { DataSource } from 'typeorm';
import { Bot } from '../entities/Bot.js';
import { Prompt } from '../entities/Prompt.js';

export class BotService {
  constructor(private dataSource: DataSource) {}

  async executeBot(botId: string, input: any): Promise<any> {
    console.log(`ü§ñ Executing bot: ${botId}`);

    // Get bot and its prompts
    const bot = await this.getBotWithPrompts(botId);
    if (!bot) {
      throw new Error(`Bot ${botId} not found`);
    }

    if (!bot.isActive) {
      throw new Error(`Bot ${botId} is not active`);
    }

    // Execute prompts in sequence
    const results = [];
    for (const prompt of bot.prompts) {
      const result = await this.executePrompt(prompt, input);
      results.push(result);
    }

    return {
      botId,
      botName: bot.name,
      results,
      timestamp: new Date().toISOString()
    };
  }

  private async executePrompt(prompt: Prompt, input: any): Promise<any> {
    console.log(`üí¨ Executing prompt: ${prompt.name}`);

    // Get the latest version of the prompt
    const latestVersion = await this.getLatestPromptVersion(prompt.id);
    if (!latestVersion) {
      throw new Error(`No version found for prompt: ${prompt.name}`);
    }

    // Execute prompt with AI service
    const result = await this.callAIService(latestVersion.content, input);

    return {
      promptId: prompt.id,
      promptName: prompt.name,
      result,
      version: latestVersion.version
    };
  }

  private async callAIService(promptContent: string, input: any): Promise<any> {
    // Implementation for calling AI service (e.g., Gemini API)
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    // Prepare the prompt with input
    const fullPrompt = `${promptContent}\n\nInput: ${JSON.stringify(input, null, 2)}`;

    // Call Gemini API
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: fullPrompt
          }]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`AI service error: ${response.statusText}`);
    }

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
  }

  private async getBotWithPrompts(botId: string): Promise<Bot | null> {
    const botRepository = this.dataSource.getRepository(Bot);
    return botRepository.findOne({
      where: { id: botId },
      relations: ['prompts']
    });
  }

  private async getLatestPromptVersion(promptId: string) {
    const promptVersionRepository = this.dataSource.getRepository('PromptVersion');
    return promptVersionRepository.findOne({
      where: { promptId },
      order: { version: 'DESC' }
    });
  }
}
```

## Job Queue Patterns

### Job Types
```typescript
export interface Job {
  id: string;
  type: 'application-build' | 'application-deploy' | 'bot-execution';
  status: 'pending' | 'processing' | 'completed' | 'failed';
  data: any;
  createdAt: Date;
  updatedAt: Date;
  error?: string;
}

export interface ApplicationBuildJob extends Job {
  type: 'application-build';
  data: {
    applicationId: string;
    userId: string;
  };
}

export interface ApplicationDeployJob extends Job {
  type: 'application-deploy';
  data: {
    applicationId: string;
    userId: string;
    environment: 'development' | 'staging' | 'production';
  };
}

export interface BotExecutionJob extends Job {
  type: 'bot-execution';
  data: {
    botId: string;
    userId: string;
    input: any;
  };
}
```

### Job Queue Management
```typescript
import Redis from 'redis';

export class JobQueue {
  constructor(private redisClient: Redis.RedisClientType) {}

  async addJob(queueName: string, jobData: any): Promise<string> {
    const jobId = this.generateJobId();
    const job: Job = {
      id: jobId,
      type: jobData.type,
      status: 'pending',
      data: jobData,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    // Add to Redis queue
    await this.redisClient.rPush(queueName, JSON.stringify(job));

    console.log(`üì¶ Added job ${jobId} to queue ${queueName}`);
    return jobId;
  }

  async getJob(queueName: string): Promise<Job | null> {
    const jobData = await this.redisClient.lPop(queueName);
    return jobData ? JSON.parse(jobData) : null;
  }

  async getJobStatus(jobId: string): Promise<Job | null> {
    // This would typically query a database for job status
    // For now, we'll return null
    return null;
  }

  private generateJobId(): string {
    return `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}
```

## Error Handling Patterns

### Graceful Error Handling
```typescript
export class BotError extends Error {
  constructor(
    message: string,
    public code: string,
    public retryable: boolean = false
  ) {
    super(message);
    this.name = 'BotError';
  }
}

export class JobProcessingError extends BotError {
  constructor(message: string, public jobId: string) {
    super(message, 'JOB_PROCESSING_ERROR', true);
    this.name = 'JobProcessingError';
  }
}

export class AIServiceError extends BotError {
  constructor(message: string) {
    super(message, 'AI_SERVICE_ERROR', true);
    this.name = 'AIServiceError';
  }
}

// Error handling in services
try {
  await this.processJob(jobData);
} catch (error) {
  if (error instanceof BotError && error.retryable) {
    // Retry the job
    await this.retryJob(jobData);
  } else {
    // Mark job as failed
    await this.markJobFailed(jobData, error);
  }
}
```

## Configuration Patterns

### Environment Configuration
```typescript
export interface BotConfig {
  database: {
    host: string;
    port: number;
    username: string;
    password: string;
    database: string;
  };
  redis: {
    host: string;
    port: number;
  };
  ai: {
    apiKey: string;
    model: string;
    maxTokens: number;
  };
  docker: {
    registry: string;
    namespace: string;
  };
}

export const getConfig = (): BotConfig => ({
  database: {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    username: process.env.DB_USER || 'platform_user',
    password: process.env.DB_PASSWORD || 'platform_password',
    database: process.env.DB_NAME || 'platform_db',
  },
  redis: {
    host: process.env.REDIS_HOST || 'localhost',
    port: parseInt(process.env.REDIS_PORT || '6379'),
  },
  ai: {
    apiKey: process.env.GEMINI_API_KEY || '',
    model: 'gemini-pro',
    maxTokens: 1000,
  },
  docker: {
    registry: process.env.DOCKER_REGISTRY || 'localhost:5000',
    namespace: process.env.DOCKER_NAMESPACE || 'platform',
  },
});
```

## Testing Patterns

### Service Testing
```typescript
import { BotService } from '../services/BotService.js';
import { DataSource } from 'typeorm';

describe('BotService', () => {
  let botService: BotService;
  let mockDataSource: jest.Mocked<DataSource>;

  beforeEach(() => {
    mockDataSource = {
      getRepository: jest.fn(),
    } as any;

    botService = new BotService(mockDataSource);
  });

  describe('executeBot', () => {
    it('should execute bot with prompts', async () => {
      const mockBot = {
        id: 'bot-1',
        name: 'Test Bot',
        isActive: true,
        prompts: [
          { id: 'prompt-1', name: 'Test Prompt' }
        ]
      };

      const mockRepository = {
        findOne: jest.fn().mockResolvedValue(mockBot),
      };

      mockDataSource.getRepository.mockReturnValue(mockRepository as any);

      const result = await botService.executeBot('bot-1', { test: 'input' });

      expect(result.botId).toBe('bot-1');
      expect(result.botName).toBe('Test Bot');
    });

    it('should throw error for inactive bot', async () => {
      const mockBot = {
        id: 'bot-1',
        name: 'Test Bot',
        isActive: false,
        prompts: []
      };

      const mockRepository = {
        findOne: jest.fn().mockResolvedValue(mockBot),
      };

      mockDataSource.getRepository.mockReturnValue(mockRepository as any);

      await expect(botService.executeBot('bot-1', {})).rejects.toThrow('Bot bot-1 is not active');
    });
  });
});
```
description:
globs:
alwaysApply: false
---
